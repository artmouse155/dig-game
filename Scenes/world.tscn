[gd_scene load_steps=51 format=3 uid="uid://yre8wvqiht01"]

[ext_resource type="Texture2D" uid="uid://bfybnidl4pm7w" path="res://Assets/Textures/Tiles/tilemap_small.png" id="2_p5811"]
[ext_resource type="Resource" uid="uid://bn0gqk43amlmn" path="res://Resources/World Generation/rock.tres" id="2_r1251"]
[ext_resource type="Texture2D" uid="uid://cnxtm8x6ihkhb" path="res://Assets/Textures/UI/drill_broken.png" id="3_6s8mq"]
[ext_resource type="Resource" uid="uid://camjt31i8lv7f" path="res://Resources/World Generation/Gems/red_gem.tres" id="3_t0cxn"]
[ext_resource type="Texture2D" uid="uid://bjff7rjw6jch0" path="res://Assets/Textures/Tiles/fade.png" id="3_vvgrb"]
[ext_resource type="Resource" uid="uid://dhgb8piyw87hi" path="res://Resources/World Generation/coal.tres" id="4_4i2cs"]
[ext_resource type="Script" path="res://Scripts/world_Player.gd" id="4_5n57c"]
[ext_resource type="Resource" uid="uid://bjhha8o23j1yo" path="res://Resources/World Generation/Gems/green_gem.tres" id="4_uwscm"]
[ext_resource type="Resource" uid="uid://c82q4lxnextrf" path="res://Resources/World Generation/Gems/blue_gem.tres" id="5_707rn"]
[ext_resource type="Texture2D" uid="uid://cvdy283dpp2t6" path="res://Assets/Textures/UI/box.png" id="5_cok10"]
[ext_resource type="Resource" uid="uid://bpfbmwfxadoq8" path="res://Resources/World Generation/silver.tres" id="5_sf4cn"]
[ext_resource type="Texture2D" uid="uid://c8u8cf4fl0v8e" path="res://Assets/Textures/Player/player.png" id="5_uf3c3"]
[ext_resource type="Texture2D" uid="uid://pfwsfufu3bwd" path="res://Assets/Textures/grass.png" id="5_weegd"]
[ext_resource type="Resource" uid="uid://l4uis2th1llt" path="res://Resources/World Generation/gold.tres" id="6_if1ct"]
[ext_resource type="Resource" uid="uid://bjw3aic4v8nip" path="res://Resources/World Generation/Powerups/extra_energy.tres" id="6_jutqh"]
[ext_resource type="Resource" uid="uid://dumdgi4t5c0cb" path="res://Resources/World Generation/Powerups/extra_durability.tres" id="6_xowi1"]
[ext_resource type="Resource" uid="uid://bg61sol4ndjf6" path="res://Resources/World Generation/Powerups/extra_turbo.tres" id="7_5e5g1"]
[ext_resource type="Resource" uid="uid://bui0yfuiu2j88" path="res://Resources/World Generation/dirt_0.tres" id="7_jx3ys"]
[ext_resource type="FontFile" uid="uid://djm3eds2ejv32" path="res://Assets/Fonts/Manrope-VariableFont_wght.ttf" id="7_p568w"]
[ext_resource type="Texture2D" uid="uid://ctyfsa7ms8jxb" path="res://Assets/Textures/UI/durability.png" id="8_l8p7o"]
[ext_resource type="Resource" uid="uid://cxuubh2by36ei" path="res://Resources/World Generation/Powerups/extra_speed.tres" id="8_mi6a4"]
[ext_resource type="Texture2D" uid="uid://cyuhlx1rvlbso" path="res://Assets/Textures/UI/energy.png" id="9_36wbe"]
[ext_resource type="Texture2D" uid="uid://c5qdey3os1w72" path="res://Assets/Textures/UI/turbo.png" id="10_tp47c"]
[ext_resource type="Texture2D" uid="uid://ckwweydn53ev" path="res://Assets/Textures/UI/depth.png" id="11_20etr"]
[ext_resource type="AudioStream" uid="uid://chb1m0yu72b6" path="res://Assets/Sound/Music/1-10. Battle - From District to District (City).mp3" id="13_f6g2e"]
[ext_resource type="Resource" uid="uid://jac2xmbuvln5" path="res://Resources/World Generation/Gems/plasma.tres" id="13_gw8xf"]
[ext_resource type="PackedScene" uid="uid://b0bo4y5hiomht" path="res://Scenes/player.tscn" id="15_8pfsl"]
[ext_resource type="PackedScene" uid="uid://dvlvltyclbpa5" path="res://Scenes/icon_and_text_particle.tscn" id="15_mp0r6"]
[ext_resource type="PackedScene" uid="uid://c5fja8c8jinkc" path="res://Scenes/UI/notification_system.tscn" id="28_xbrhy"]
[ext_resource type="Texture2D" uid="uid://bti7s36oi67xb" path="res://Assets/Textures/UI/throttle/throttle_base.png" id="29_417t6"]
[ext_resource type="Texture2D" uid="uid://sj4g5hoky4bt" path="res://Assets/Textures/UI/throttle/throttle_knob.png" id="30_rkleb"]
[ext_resource type="Script" path="res://Scripts/game_over.gd" id="32_v23fj"]

[sub_resource type="GDScript" id="GDScript_d1elt"]
script/source = "extends Node2D

@export var linear_curve: Curve
@export var bell_curve: Curve
@export var smooth_curve: Curve
@export var constant_curve: Curve
@export var randf_noise: Noise
@export var smooth_noise: Noise

const SMOOTH_NOISE_MIN = -.75
const SMOOTH_NOISE_MAX = .75

const RANDF_NOISE_MIN = -1
const RANDF_NOISE_MAX = 1

#if the tile we want to mine will only be in our drill radius for less than MINE_DIST distance, disregard
const MINE_DIST: float = 1

@export var day_number_label: Label
const DAY_NUMBER_Y_OFFSET = -700

var score: float = 0.0

@export var gen_data: Array[Gen]

@onready var subviewport = $SubViewportContainer/SubViewport
@onready var gameover = $GameOver

@export var iconAndTextParticle: PackedScene
@export var notificationSystem: Node2D
#var tile_data = {}

var chunks = {}

#TODO: make all resolution changes dynamic
var resolution = Vector2(1920, 1080)
const CHUNK_RESOLUTION: int = 16
var DEFAULT_CHUNK = CHUNK_RESOLUTION * Vector2i.ONE
#@export var noise_texture : NoiseTexture2D
@onready var tilemap = %TileMap
@onready var chunk_path = %Player/ChunkRegion/PathFollow2D

const BACKGROUND_LAYER = -1
const GROUND_LAYER = 0
const LIGHT_LAYER = 1

const DIM_LIGHT = 9

var camera_pos = Vector2.ZERO # Vector2(1920,1080)

var ground_source_id = 1
var light_source_id = 2

var light_radius = 9

var drill_radius = 1.8
var player_radius = 1.5
const BOMB_RADIUS = 9

#inside of light_radius
const LIGHT_EDGE_SIZE = 3

var background_atlas:
	get:
		return Vector2i(randi_range(3, 7), 2)

var per_day_resources: Array[ResourceData] = [
	ResourceData.new(\"ore\", 0),
	ResourceData.new(\"red_gem\", 0),
	ResourceData.new(\"green_gem\", 0),
	ResourceData.new(\"blue_gem\", 0),
	ResourceData.new(\"plasma\", 0),
]
@onready var per_day_resources_key = per_day_resources.map(func(r_d): return r_d.res_name)

var day_has_been_saved: bool = false

#ALERT: THIS MUST BE SYNCED WITH THE STATS IN PLAYER_DATA.GD
var day_stats = {
	\"max_depth\": 0,
	\"max_ore\": 0,
	\"max_green_gems\": 0,
	\"max_blue_gems\": 0,
	\"max_red_gems\": 0,
	\"max_plasma\": 0,
	\"max_powerups_collected\": 0,
	\"max_boosts_used\": 0,
	\"max_blocks_broken\": 0,
	\"max_speed\": 0,
	\"max_time_mining\": 0
}

var component_triggers: Array[ComponentObjectSaveData] = []
var achievement_triggers: Array[Achievement] = []

func _ready():

	#print(\"air: \" + str(tilemap.get_cell_atlas_coords(GROUND_LAYER, Vector2i(0, -100))))
	
	%Player/ChunkRegion.scale = DEFAULT_CHUNK

	for i in gen_data:
		match i.noise:
			\"randf\":
				i.noise_res = randf_noise.duplicate()
			\"smooth\":
				i.noise_res = smooth_noise.duplicate()
		i.noise_res.seed = randi()

	tilemap.add_layer(LIGHT_LAYER)
	tilemap.set_layer_z_index(LIGHT_LAYER, LIGHT_LAYER)
	tilemap.add_layer(BACKGROUND_LAYER)
	tilemap.set_layer_z_index(BACKGROUND_LAYER, BACKGROUND_LAYER)
	
	day_number_label.text = \"Day \" + str(Game.player_data.get_stat(\"day_number\"))
	day_number_label.position.y = DAY_NUMBER_Y_OFFSET
	
	if Game.player_data.get_stat(\"max_depth\") != 0:
		%HFollow/PB.position.y = Game.player_data.get_stat(\"max_depth\") * Game.TILE_WIDTH
	
	update_h_follow_pos()

	setup_triggers()

	generate_world()

func setup_triggers():
	var all_components: Array[DrillerComponentObject] = Game.get_all_game_objects()
	for i in range(len(all_components)):
		var comp_save_data = Game.player_data.find_component_object_save_data(all_components[i])
		if not comp_save_data.unlocked:
			component_triggers.append(comp_save_data)
	
	var all_acheivements: Array[Achievement] = Game.get_all_achievements()
	for i in range(len(all_acheivements)):
		if not Game.player_data.is_acheivement_completed(all_acheivements[i]):
			achievement_triggers.append(all_acheivements[i])

func update_h_follow_pos():
	%HFollow.position.x = %Player.position.x - resolution.x / 2

#TODO: Doesn't need to happen every single tick?
func check_chunk_regions():
	for ratio in [0.0, 1 / 8.0, 0.25, 3 / 8.0, 0.5, 5 / 8.0, 0.75, 7 / 8.0]:
		#get the point, then tile coordinate, then chunk
		chunk_path.set_progress_ratio(ratio)
		var chunk_coordinate = coords_to_chunk(pixel_coords_to_map_coords(chunk_path.global_position))
		if not chunk_has_data(chunk_coordinate):
			generate_chunk(chunk_coordinate)

func generate_world():
	generate_chunk(Vector2.ZERO)

func generate_chunk(chunk_coords: Vector2i):
	var start_time = Time.get_ticks_msec()
	
	var temp_chunk = []

	for x in range(DEFAULT_CHUNK.x):
		temp_chunk.append([])
		for y in range(DEFAULT_CHUNK.y):
			temp_chunk[x].append(null)
	
	#print(\"Generating chunk: \" + str(chunk_coords))
	if !(chunk_coords.x in chunks.keys()):
		chunks[chunk_coords.x] = {}
	if !(chunk_coords.y in chunks[chunk_coords.x].keys()):
		chunks[chunk_coords.x][chunk_coords.y] = temp_chunk

	for i in gen_data:
		if ((DEFAULT_CHUNK.y * chunk_coords.y) >= i.min_depth) or ((DEFAULT_CHUNK.y * (chunk_coords.y + 1)) - 1 <= i.max_depth):
			var noise = i.noise_res
			var noise_min = 0
			var noise_max = 1
			var curve: Curve
			match i.curve:
				\"linear\":
					curve = linear_curve
				\"bell\":
					curve = bell_curve
				\"smooth\":
					curve = smooth_curve
				\"constant\":
					curve = constant_curve

			match noise.noise_type:
				FastNoiseLite.TYPE_SIMPLEX_SMOOTH:
					noise_min = SMOOTH_NOISE_MIN
					noise_max = SMOOTH_NOISE_MAX
				FastNoiseLite.TYPE_VALUE:
					noise_min = RANDF_NOISE_MIN
					noise_max = RANDF_NOISE_MAX

			#var atlas_size = i.atlas.size()

			for y in range(DEFAULT_CHUNK.y):
				var y_cor = y + (DEFAULT_CHUNK.y * chunk_coords.y)
				if (y_cor >= i.min_depth) and (y_cor <= i.max_depth):
					var function_input = float(y_cor - i.min_depth) / (i.max_depth - i.min_depth)
					var threshold_value = (curve.sample(function_input) * (i.max_freq - i.min_freq)) + i.min_freq
					for x in range(DEFAULT_CHUNK.x):
						var coords = Vector2i(x, y) + Vector2i(chunk_coords.x * DEFAULT_CHUNK.x, chunk_coords.y * DEFAULT_CHUNK.y)
						var noise_value = (noise.get_noise_2d(coords.x, coords.y) - noise_min) / (noise_max - noise_min)
						if (!temp_chunk[x][y]) and (noise_value <= threshold_value):
							#tilemap.set_cell(GROUND_LAYER, coords, ground_source_id, i.atlas[randi_range(0,atlas_size-1)])
							temp_chunk[x][y] = {\"health\" = i.health, \"gen\" = i}
							set_tile_data(coords, temp_chunk[x][y])
						#if !Debug.fullbright:
							#tilemap.set_cell(LIGHT_LAYER, coords, light_source_id, Vector2i(0,0))
	var mid_time = Time.get_ticks_msec()
	var mid_elapsed_time = mid_time - start_time

	draw_chunk(chunk_coords)
	var end_time = Time.get_ticks_msec()
	var elapsed_time = end_time - start_time
	print(\"Chunk generated in \", elapsed_time, \"ms (\", mid_elapsed_time, \"ms + \", (end_time - mid_time), \"ms)\")

func draw_chunk(chunk_coords: Vector2i):
	#print(\"CHUNK: \" + str(chunks[0][0]))
	
	for x in range(DEFAULT_CHUNK.x):
		for y in range(DEFAULT_CHUNK.y):
			var coords = Vector2i(x, y) + Vector2i(chunk_coords.x * DEFAULT_CHUNK.x, chunk_coords.y * DEFAULT_CHUNK.y)
			if tile_has_data(coords):
				if get_tile_data(coords):
					var gen = get_chunk_data(chunk_coords)[x][y][\"gen\"]
					tilemap.set_cell(GROUND_LAYER, coords, ground_source_id, gen.atlas[randi_range(0, gen.atlas.size() - 1)])
					if !Debug.fullbright:
						tilemap.set_cell(LIGHT_LAYER, coords, light_source_id, Vector2i(0, 0))

func _process(delta):
	print(\"Speed: \",%Player.speed)
	
	if not Game.paused:
		if Input.is_action_just_pressed(\"accelerate\"):
			%Player.change_speed()
		elif Input.is_action_just_pressed(\"decelerate\"):
			%Player.change_speed(-1)
		update_h_follow_pos()
		mine(delta)
		check_chunk_regions()

		check_triggers()

		day_stats[\"max_speed\"] = max(day_stats[\"max_speed\"], %Player.velocity)
		day_stats[\"max_depth\"] = max(day_stats[\"max_depth\"], %Player.depth)
		#damage_tile(center_tile, %Player.drill_speed * delta)
		#tile_break_particle.position = get_global_mouse_position()

func mine(delta):
		#Code for mining
		#%Sky.position.x = %Player.position.x - resolution.x/2
		
		var center_tile = tilemap.local_to_map( %Player.position)
		light_up_around_coords(center_tile)
		
		var drill_tile = tilemap.local_to_map( %Player.player_texture.get_drill_center().global_position)
		
		#stop if we can't break it in .5 seconds.
		#slow if we can't break it in .1 seconds.
		#var t_slow = .1
		#var t_stop = .5
		
		#var drill_acceleration_constant = 1
		
		#var slow_down_threshold_met = false
		var complete_stop_threshold_met = false

		var damage = %Player.engine_power * 100
		#var tiles = []
		
		# a value of 1 means that we should stop completely. A value of 0 means keep accelerating. between is determined with a exponential graph.
		var max_damage_ratio: float = 0.0
		var max_accel: float = 0.0
		for x in range(ceil(2 * drill_radius)):
			for y in range(ceil(2 * drill_radius)):
				var tile_pos = drill_tile - Vector2i(x, y) + Vector2i(Vector2i.ONE * round(drill_radius))
				if get_tile_data(tile_pos):
					var tile_distance = ((Vector2(tile_pos) + Vector2(.5, .5)) * Game.TILE_WIDTH).distance_to( %Player.player_texture.get_drill_center().global_position) / float(Game.TILE_WIDTH)
					if tile_distance <= (drill_radius):
						var normalized_x_y = (((Vector2(tile_pos) + Vector2(.5, .5)) * Game.TILE_WIDTH) - %Player.player_texture.get_drill_center().global_position).rotated( %Player.driller_angle) / float(Game.TILE_WIDTH)
						
						var health: float = get_tile_data(tile_pos)[\"health\"]
						
						var eqn_dist = (sqrt(pow(drill_radius, 2) + pow(normalized_x_y.x, 2)) - normalized_x_y.y)
						if (eqn_dist >= MINE_DIST):
							var t = (health / damage)
							#print(get_tile_data(tile_pos)[\"health\"])
							var needed_decel = (2 * pow(t, 2)) * (eqn_dist - (%Player.velocity * t))
							max_accel = max(max_accel, needed_decel)
							var complete_stop_threshold: float = (damage * eqn_dist / (%Player.velocity))
							if health > complete_stop_threshold:
								print(\"stopped! eqn dist:\" + str(eqn_dist))
								#print(\"health:  \" + str(health) + \" thrshld: \" + str(complete_stop_threshold))
								complete_stop_threshold_met = true
							else:
								#print(\"health:  \" + str(health))
								max_damage_ratio = max(max_damage_ratio, float(health) / complete_stop_threshold)

						damage_tile(tile_pos, damage * delta)

				#damage_tile(temp_tile_pos, damage * delta)
		%Player.max_damage_ratio = max_damage_ratio
		%DEBUG.text = \"max_damage_ratio:  \" + str(max_damage_ratio)
		%Player.complete_stop = complete_stop_threshold_met
		%Player.move(delta)
		
func _input(ev):

	if not Game.paused:
		if Input.is_action_just_pressed(\"shop\"):
			shop_button_pressed()
		
		if Input.is_action_just_pressed(\"reset_day\"):
			new_day_button_pressed()
		
		if Input.is_action_just_pressed(\"kill\"):
			game_over(\"durability\", true)
			
		if Input.is_action_just_pressed(\"debug_trigger\"):
			notificationSystem.add_unlock_notification(Game.player_data.hull)

		if Input.is_action_pressed(\"turbo\"):
			%Player.turbo()

		if ev is InputEventMouseButton:
			if Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
				var center_tile = tilemap.local_to_map( %Player.get_local_mouse_position() + %Player.position)
				%Player.screenshake()
				
				for x in range(1 + (2 * BOMB_RADIUS)):
					for y in range(1 + (2 * BOMB_RADIUS)):
						var tile_pos = center_tile - Vector2i(x, y) + Vector2i(Vector2i.ONE * floor(BOMB_RADIUS))
						var tile_distance = Vector2(tile_pos).distance_to(Vector2(center_tile))

						if tile_distance <= (BOMB_RADIUS):
							damage_tile(tile_pos, 999)

func mine_tile(coords, tileGen: Gen):
	if tile_exists(coords):
		var particle = preload (\"res://Scenes/tile_break_particle.tscn\").instantiate()
		subviewport.add_child(particle)
		particle.position = tilemap.map_to_local(coords)
		particle.restart()
		particle.finished.connect(particle.queue_free)
		
		if (tileGen.group == \"ore\"):
			var points_indicator = preload (\"res://Scenes/label_particle.tscn\").instantiate()
			points_indicator.setup(str(tileGen.value))
			subviewport.add_child(points_indicator)
			points_indicator.position = tilemap.map_to_local(coords)
			points_indicator.particle_maker.restart()
			points_indicator.particle_maker.finished.connect(points_indicator.queue_free)
		
		elif (tileGen.group == \"gem\"):
			var temp_particle = iconAndTextParticle.instantiate()
			temp_particle.gem_setup(tilemap.map_to_local(coords), ResourceData.new(tileGen.name, floor(tileGen.value)))
			subviewport.add_child(temp_particle)
		
		elif (tileGen.group == \"powerup\"):
			var temp_particle = iconAndTextParticle.instantiate()
			temp_particle.powerup_setup(tilemap.map_to_local(coords), BuffItem.new(tileGen.name, tileGen.value))
			subviewport.add_child(temp_particle)
		
		day_stats[\"max_blocks_broken\"] = day_stats[\"max_blocks_broken\"] + 1
		tilemap.set_cell(BACKGROUND_LAYER, coords, ground_source_id, background_atlas)
		tilemap.erase_cell(GROUND_LAYER, coords)

func light_up_around_coords(coords):
	var light_edge_radius = light_radius - LIGHT_EDGE_SIZE
	var center_tile = coords
	for x in range(1 + (2 * light_radius)):
		for y in range(1 + (2 * light_radius)):
			var tile_pos = center_tile - Vector2i(x, y) + Vector2i(Vector2i.ONE * floor(light_radius))
			var tile_distance = Vector2(tile_pos).distance_to(Vector2(center_tile))
			var light_level = 7
			if tile_distance <= (light_radius - light_edge_radius):
				light_level = 15
			else:
				light_level = 15 - floor(min(((tile_distance - (light_radius + 1 - light_edge_radius)) / light_edge_radius), 1) * 15)
			
			light_level = max(light_level, min(DIM_LIGHT, tilemap.get_cell_atlas_coords(LIGHT_LAYER, tile_pos, light_source_id).x))
			if tilemap.get_cell_source_id(LIGHT_LAYER, tile_pos) != - 1:
				tilemap.set_cell(LIGHT_LAYER, tile_pos, light_source_id, Vector2i(light_level, 0))

#TODO: figure out why this doesn't work for dirt!
func tile_has_data(coords):
	return chunk_has_data(coords_to_chunk(coords))
	#if !(coords.x in tile_data.keys()):
	#		return false
	#if !(coords.y in tile_data[coords.x].keys()):
	#		return false
	#return true

func get_tile_data(coords):
	if tile_has_data(coords):
		var adjusted_coords = Vector2(int(coords.x) % DEFAULT_CHUNK.x, int(coords.y) % DEFAULT_CHUNK.y)
		return get_chunk_data(coords_to_chunk(coords))[adjusted_coords.x][adjusted_coords.y]
	else:
		return null

func set_tile_data(coords, data):
	if tile_has_data(coords):
		var adjusted_coords = Vector2(int(coords.x) % DEFAULT_CHUNK.x, int(coords.y) % DEFAULT_CHUNK.y)
		get_chunk_data(coords_to_chunk(coords))[adjusted_coords.x][adjusted_coords.y] = data
	else:
		print(\"ERROR: NO TILE DATA FOUND\")
	
func damage_tile(coords, amount):
	var tile_data = get_tile_data(coords)
	if tile_exists(coords):
		if tile_has_data(coords):
			#print(tile_data[coords.x][coords.y][\"health\"])
			tile_data[\"health\"] -= amount
			if tile_data[\"health\"] <= 0:
				
				#get tile reward based on the type of tile
				var tile_name = tile_data[\"gen\"].name
				var tile_group = tile_data[\"gen\"].group
				var points = tile_data[\"gen\"].value
				match tile_group:
					\"ore\":
						get_points(points)
					\"dirt\":
						get_points(points)
					\"gem\":
						var index = per_day_resources_key.find(tile_name)
						if index != - 1:
							per_day_resources[index] = per_day_resources[index].changed_by(tile_data[\"gen\"].value)
					\"powerup\":
						match tile_name:
							\"extra_speed\":
								%Player.temporarily_gain_extra_max_speed(points)
							\"extra_turbo\":
								%Player.turbos = %Player.turbos + points
							\"extra_durability\":
								%Player.gain_durability(points)
							\"extra_energy\":
								%Player.gain_energy(points)
				mine_tile(coords, tile_data[\"gen\"])

func tile_exists(coords):
	return (tilemap.get_cell_source_id(GROUND_LAYER, coords) != - 1) and coords.y >= 0

func get_points(added_points):
	score += added_points
	%Score.text = str(floor(score))

func pixel_coords_to_map_coords(pixel_coords):
	return tilemap.local_to_map(pixel_coords)

func coords_to_chunk(coords: Vector2i):
	return floor(Vector2(coords) / Vector2(DEFAULT_CHUNK))

func chunk_has_data(chunk_coords: Vector2i):
	#if chunk_coords.y < 0:
		#return true
	if chunk_coords.x in chunks.keys():
		if chunk_coords.y in chunks[chunk_coords.x].keys():
			return true
		else:
			return false
	else:
		return false

func get_chunk_data(chunk_coords: Vector2i) -> Array:
	if chunk_has_data(chunk_coords):
		return chunks[chunk_coords.x][chunk_coords.y]
	print(\"error: chunk had no data!\")
	return []

func check_triggers():
	var rem = []
	for i in range(len(component_triggers)):
		var trigger: Trigger = component_triggers[i].base_component.unlock_trigger
		if trigger.is_met(day_stats[trigger.trigger_stat_name]):
			rem.append(component_triggers[i])
	
	for component_save in rem:
		notificationSystem.add_unlock_notification(component_save.base_component)
		Game.player_data.unlock_component(component_save.base_component)
		component_triggers.erase(component_save)

	rem = []
	for i in range(len(achievement_triggers)):
		var trigger: Trigger = achievement_triggers[i].achievement_trigger
		if trigger.is_met(day_stats[trigger.trigger_stat_name]):
			rem.append(achievement_triggers[i])

	for achievement in rem:
		notificationSystem.add_achievement_notification(achievement)
		Game.player_data.award_achievement(achievement)
		for reward in achievement.resource_rewards:
			var total = reward.amount
			match reward.res_name:
				\"ore\":
					score += total
				\"red_gem\":
					Game.player_data.add_resource_amount(reward.res_name, total)
				\"blue_gem\":
					Game.player_data.add_resource_amount(reward.res_name, total)
				\"green_gem\":
					Game.player_data.add_resource_amount(reward.res_name, total)
				\"plasma\":
					Game.player_data.add_resource_amount(reward.res_name, total)
		
		achievement_triggers.erase(achievement)

func new_day_button_pressed():
	game_over()
	Game.new_day()

func shop_button_pressed():
	game_over()
	Game.go_to_shop()

func main_menu_button_pressed():
	game_over()
	Game.go_to_main_menu()

#append per-day saved resources to player data
func append_res_to_save_data():
	#TODO: make more robust!
	for key in day_stats.keys():
		Game.player_data.set_stat(key, max(Game.player_data.get_stat(key), day_stats[key]))
	
	per_day_resources[0].amount = int(score)
	for i in range(len(per_day_resources)):
		Game.player_data.add_resource_amount(per_day_resources[i].res_name, per_day_resources[i].amount)

func save_day_to_file():
	if !day_has_been_saved:
		day_has_been_saved = true
		append_res_to_save_data()
		Game.end_day()

func game_over(reason: String=\"none\", show_game_over_screen: bool=false):
	save_day_to_file()
	if show_game_over_screen:
		gameover.game_over(reason)
"

[sub_resource type="Curve" id="Curve_gru56"]
_data = [Vector2(0, 0), 0.0, 1.0, 0, 1, Vector2(1, 1), 1.0, 0.0, 1, 0]
point_count = 2

[sub_resource type="Curve" id="Curve_pe81p"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.5, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3
metadata/_snap_enabled = true

[sub_resource type="Curve" id="Curve_ggsgv"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="Curve" id="Curve_xfmaw"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 1, Vector2(1, 1), 0.0, 0.0, 1, 0]
point_count = 2
metadata/_snap_enabled = true

[sub_resource type="FastNoiseLite" id="FastNoiseLite_wa7yg"]
noise_type = 5
frequency = 1.0
fractal_type = 0
domain_warp_fractal_type = 0

[sub_resource type="FastNoiseLite" id="FastNoiseLite_6w0px"]
frequency = 0.15

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_imo1k"]
resource_name = "GROUND"
texture = ExtResource("2_p5811")
texture_region_size = Vector2i(32, 32)
0:0/next_alternative_id = 2
0:0/0 = 0
1:0/next_alternative_id = 2
1:0/0 = 0
2:0/next_alternative_id = 2
2:0/0 = 0
3:0/next_alternative_id = 2
3:0/0 = 0
4:0/next_alternative_id = 2
4:0/0 = 0
5:0/next_alternative_id = 2
5:0/0 = 0
6:0/next_alternative_id = 2
6:0/0 = 0
7:0/next_alternative_id = 2
7:0/0 = 0
0:1/next_alternative_id = 2
0:1/0 = 0
1:1/next_alternative_id = 2
1:1/0 = 0
2:1/next_alternative_id = 2
2:1/0 = 0
3:1/next_alternative_id = 2
3:1/0 = 0
4:1/next_alternative_id = 2
4:1/0 = 0
5:1/next_alternative_id = 2
5:1/0 = 0
6:1/next_alternative_id = 2
6:1/0 = 0
7:1/next_alternative_id = 2
7:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
0:4/0 = 0
1:4/0 = 0
2:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
6:4/0 = 0
7:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
6:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
2:6/0 = 0
3:6/0 = 0
4:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
0:7/0 = 0
1:7/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_vg1tg"]
resource_name = "<null>"
texture = ExtResource("3_vvgrb")
texture_region_size = Vector2i(32, 32)
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
0:0/0 = 0
1:0/0 = 0

[sub_resource type="TileSet" id="TileSet_pfbys"]
tile_size = Vector2i(32, 32)
sources/1 = SubResource("TileSetAtlasSource_imo1k")
sources/2 = SubResource("TileSetAtlasSource_vg1tg")

[sub_resource type="Curve" id="Curve_mcinw"]
_data = [Vector2(0, 0), 0.0, 0.2, 0, 1, Vector2(0.5, 0.1), 0.2, 0.666667, 1, 1, Vector2(0.8, 0.3), 0.666667, 3.0, 1, 1, Vector2(0.9, 0.6), 3.0, 4.0, 1, 1, Vector2(1, 1), 4.0, 4.0, 1, 1]
point_count = 5
metadata/_snap_enabled = true

[sub_resource type="Curve2D" id="Curve2D_enevc"]
_data = {
"points": PackedVector2Array(0, 0, 0, 0, -32, -32, 0, 0, 0, 0, 32, -32, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, -32, 32, 0, 0, 0, 0, -32, -32)
}
point_count = 5

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_f0bq4"]
content_margin_left = 10.0
content_margin_top = 10.0
content_margin_right = 10.0
content_margin_bottom = 10.0
bg_color = Color(0.160784, 0.160784, 0.160784, 1)
border_width_left = 5
border_width_top = 5
border_width_right = 5
border_width_bottom = 5

[sub_resource type="Gradient" id="Gradient_fnkcb"]
offsets = PackedFloat32Array(0, 0.5, 1)
colors = PackedColorArray(0.719454, 2.55093e-06, 5.77569e-07, 1, 0.73, 0.48691, 0.4599, 1, 0.719454, 2.55093e-06, 5.77569e-07, 1)
metadata/_snap_enabled = true

[sub_resource type="GradientTexture2D" id="GradientTexture2D_tk7v4"]
gradient = SubResource("Gradient_fnkcb")
width = 640
height = 200
fill_to = Vector2(0, 1)
metadata/_snap_enabled = true

[sub_resource type="Gradient" id="Gradient_gasi8"]
offsets = PackedFloat32Array(0, 0.5, 1)
colors = PackedColorArray(0.209985, 0.584693, 0.833672, 1, 0.532576, 0.781069, 0.970433, 1, 0.209985, 0.584693, 0.833672, 1)
metadata/_snap_enabled = true

[sub_resource type="GradientTexture2D" id="GradientTexture2D_02yaq"]
gradient = SubResource("Gradient_gasi8")
width = 440
height = 200
fill_to = Vector2(0, 1)
metadata/_snap_enabled = true

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_bs6xb"]
bg_color = Color(0.0941176, 0.0941176, 0.0941176, 0.47451)
corner_radius_top_left = 10
corner_radius_top_right = 10
corner_radius_bottom_right = 10
corner_radius_bottom_left = 10

[node name="World" type="Node2D" node_paths=PackedStringArray("day_number_label", "notificationSystem") groups=["scenes"]]
script = SubResource("GDScript_d1elt")
linear_curve = SubResource("Curve_gru56")
bell_curve = SubResource("Curve_pe81p")
smooth_curve = SubResource("Curve_ggsgv")
constant_curve = SubResource("Curve_xfmaw")
randf_noise = SubResource("FastNoiseLite_wa7yg")
smooth_noise = SubResource("FastNoiseLite_6w0px")
day_number_label = NodePath("SubViewportContainer/SubViewport/Control2/Control/Day Number")
gen_data = Array[Resource("res://Resources/gen.gd")]([ExtResource("2_r1251"), ExtResource("3_t0cxn"), ExtResource("4_uwscm"), ExtResource("5_707rn"), ExtResource("6_xowi1"), ExtResource("7_5e5g1"), ExtResource("8_mi6a4"), ExtResource("6_jutqh"), ExtResource("4_4i2cs"), ExtResource("5_sf4cn"), ExtResource("6_if1ct"), ExtResource("13_gw8xf"), ExtResource("7_jx3ys")])
iconAndTextParticle = ExtResource("15_mp0r6")
notificationSystem = NodePath("UI/MarginContainer/MarginContainer3/Control/NotificationSystem")

[node name="Darkness" type="ColorRect" parent="."]
z_index = -10
z_as_relative = false
offset_right = 1920.0
offset_bottom = 1080.0
color = Color(0, 0, 0, 1)

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
offset_right = 1920.0
offset_bottom = 1080.0
mouse_filter = 2

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(1920, 1080)
render_target_update_mode = 4

[node name="Control2" type="Control" parent="SubViewportContainer/SubViewport"]
layout_mode = 3
anchors_preset = 0

[node name="Control" type="Control" parent="SubViewportContainer/SubViewport/Control2"]
layout_mode = 3
anchors_preset = 0

[node name="Day Number" type="Label" parent="SubViewportContainer/SubViewport/Control2/Control"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -86.0
offset_top = -44.5
offset_right = 86.0
offset_bottom = 44.5
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 4
theme_override_font_sizes/font_size = 64
text = "Day 1"
horizontal_alignment = 1

[node name="TileMap" type="TileMap" parent="SubViewportContainer/SubViewport"]
unique_name_in_owner = true
tile_set = SubResource("TileSet_pfbys")
format = 2
layer_0/tile_data = PackedInt32Array(-131066, 458753, 4, -131065, 458753, 4, -131064, 458753, 4, -131060, 458753, 4, -131059, 458753, 4, -131055, 458753, 4, -131052, 458753, 4, -131051, 458753, 4, -131047, 458753, 4, -131043, 458753, 4, -131040, 458753, 4, -131039, 458753, 4, -131038, 458753, 4, -131037, 458753, 4, -131030, 458753, 4, -131025, 458753, 4, -131024, 458753, 4, -131020, 458753, 4, -131019, 458753, 4, -131018, 458753, 4, -131017, 458753, 4, -131013, 458753, 4, -131012, 458753, 4, -131011, 458753, 4, -131010, 458753, 4, -131009, 458753, 4, -131008, 458753, 4, -65539, 458753, 4, -65538, 458753, 4, -65537, 458753, 4, -131072, 458753, 4, -131071, 458753, 4, -131070, 458753, 4, -131069, 458753, 4, -65543, 458753, 4, -65544, 458753, 4, -9, 458753, 4, -131001, 458753, 4, -131000, 458753, 4, -130999, 458753, 4, -130998, 458753, 4)

[node name="Player" type="Node2D" parent="SubViewportContainer/SubViewport" node_paths=PackedStringArray("world", "player_texture")]
unique_name_in_owner = true
position = Vector2(960, -200)
script = ExtResource("4_5n57c")
world = NodePath("../../..")
player_texture = NodePath("Player")
intermediate_damage_curve = SubResource("Curve_mcinw")

[node name="Player" parent="SubViewportContainer/SubViewport/Player" instance=ExtResource("15_8pfsl")]

[node name="DrillCenter" type="Node2D" parent="SubViewportContainer/SubViewport/Player/Player"]
position = Vector2(0, 60)

[node name="camera" type="Camera2D" parent="SubViewportContainer/SubViewport/Player" groups=["camera"]]

[node name="Sprite" type="Sprite2D" parent="SubViewportContainer/SubViewport/Player"]
visible = false
z_index = 1
texture = ExtResource("5_uf3c3")

[node name="ChunkRegion" type="Path2D" parent="SubViewportContainer/SubViewport/Player"]
curve = SubResource("Curve2D_enevc")

[node name="PathFollow2D" type="PathFollow2D" parent="SubViewportContainer/SubViewport/Player/ChunkRegion"]
position = Vector2(-32, -32)

[node name="HFollow" type="Control" parent="SubViewportContainer/SubViewport"]
unique_name_in_owner = true
layout_mode = 3
anchors_preset = 0
offset_right = 1920.0
offset_bottom = 1080.0

[node name="Control" type="Control" parent="SubViewportContainer/SubViewport/HFollow"]
anchors_preset = 0

[node name="Sky" type="ColorRect" parent="SubViewportContainer/SubViewport/HFollow/Control"]
z_index = -5
z_as_relative = false
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_top = -1080.0
offset_right = 1920.0
grow_vertical = 0
color = Color(0.588235, 0.780392, 0.94902, 1)

[node name="PB" type="Control" parent="SubViewportContainer/SubViewport/HFollow"]
z_index = 1
layout_mode = 1
anchors_preset = 10
anchor_right = 1.0
offset_top = -1500.0
offset_bottom = -1500.0
grow_horizontal = 2

[node name="PB Label" type="Label" parent="SubViewportContainer/SubViewport/HFollow/PB"]
z_index = 1
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -197.0
offset_top = -81.0
offset_right = 197.0
offset_bottom = 8.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(1, 0, 0, 1)
theme_override_fonts/font = ExtResource("7_p568w")
theme_override_font_sizes/font_size = 48
text = "Personal Best"
horizontal_alignment = 1
vertical_alignment = 2

[node name="Record" type="Line2D" parent="SubViewportContainer/SubViewport/HFollow/PB"]
z_index = 1
points = PackedVector2Array(0, 0, 1920, 0)
width = 2.0
default_color = Color(1, 0, 0, 1)

[node name="Grass" type="TextureRect" parent="SubViewportContainer/SubViewport/HFollow"]
layout_mode = 0
offset_top = -32.0
offset_right = 1920.0
texture = ExtResource("5_weegd")
stretch_mode = 2

[node name="UI" type="Control" parent="."]
z_index = 5
layout_mode = 3
anchors_preset = 0
offset_right = 1920.0
offset_bottom = 1080.0

[node name="MarginContainer" type="MarginContainer" parent="UI"]
layout_mode = 2
offset_right = 1920.0
offset_bottom = 50.0
theme_override_constants/margin_left = 50
theme_override_constants/margin_top = 50
theme_override_constants/margin_right = 50
theme_override_constants/margin_bottom = 100

[node name="MarginContainer2" type="MarginContainer" parent="UI/MarginContainer"]
layout_mode = 2
theme_override_constants/margin_top = 300

[node name="Score Panel" type="PanelContainer" parent="UI/MarginContainer/MarginContainer2"]
z_index = 20
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_styles/panel = SubResource("StyleBoxFlat_f0bq4")

[node name="HBoxContainer" type="HBoxContainer" parent="UI/MarginContainer/MarginContainer2/Score Panel"]
layout_mode = 2

[node name="TextureRect" type="TextureRect" parent="UI/MarginContainer/MarginContainer2/Score Panel/HBoxContainer"]
layout_mode = 2
texture = ExtResource("5_cok10")
stretch_mode = 2

[node name="Score" type="Label" parent="UI/MarginContainer/MarginContainer2/Score Panel/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(50, 0)
layout_mode = 2
theme_override_constants/outline_size = 3
theme_override_fonts/font = ExtResource("7_p568w")
text = "0"

[node name="VBoxContainer" type="VBoxContainer" parent="UI/MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 20

[node name="Status Bars" type="Control" parent="UI/MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 205)
layout_mode = 2

[node name="HBoxL" type="HBoxContainer" parent="UI/MarginContainer/VBoxContainer/Status Bars"]
layout_mode = 2
offset_top = 4.0
offset_right = 1920.0
offset_bottom = 56.0

[node name="MarginContainer2" type="MarginContainer" parent="UI/MarginContainer/VBoxContainer/Status Bars"]
layout_mode = 1
anchors_preset = 6
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
offset_left = -1548.0
offset_top = -100.0
offset_bottom = 100.0
grow_horizontal = 0
grow_vertical = 2
size_flags_horizontal = 8
theme_override_constants/margin_left = 0
theme_override_constants/margin_right = 50

[node name="HBoxR" type="HBoxContainer" parent="UI/MarginContainer/VBoxContainer/Status Bars/MarginContainer2"]
layout_mode = 2
theme_override_constants/separation = 50
alignment = 2

[node name="Durability" type="TextureProgressBar" parent="UI/MarginContainer/VBoxContainer/Status Bars/MarginContainer2/HBoxR"]
unique_name_in_owner = true
layout_mode = 2
max_value = 640.0
value = 640.0
texture_over = ExtResource("8_l8p7o")
texture_progress = SubResource("GradientTexture2D_tk7v4")
texture_progress_offset = Vector2(115, 0)

[node name="ColorRect" type="ColorRect" parent="UI/MarginContainer/VBoxContainer/Status Bars/MarginContainer2/HBoxR/Durability"]
z_as_relative = false
layout_mode = 0
offset_left = 94.0
offset_top = 15.0
offset_right = 770.0
offset_bottom = 176.0
color = Color(0, 0, 0, 1)

[node name="Energy" type="TextureProgressBar" parent="UI/MarginContainer/VBoxContainer/Status Bars/MarginContainer2/HBoxR"]
unique_name_in_owner = true
layout_mode = 2
max_value = 440.0
value = 440.0
texture_over = ExtResource("9_36wbe")
texture_progress = SubResource("GradientTexture2D_02yaq")
texture_progress_offset = Vector2(115, 0)

[node name="ColorRect" type="ColorRect" parent="UI/MarginContainer/VBoxContainer/Status Bars/MarginContainer2/HBoxR/Energy"]
z_as_relative = false
layout_mode = 2
offset_left = 94.0
offset_top = 13.0
offset_right = 564.0
offset_bottom = 187.0
color = Color(0, 0, 0, 1)

[node name="MarginContainer" type="MarginContainer" parent="UI/MarginContainer/VBoxContainer"]
layout_mode = 2
theme_override_constants/margin_right = 75

[node name="HBox" type="HBoxContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer"]
layout_mode = 2
size_flags_horizontal = 8
theme_override_constants/separation = 20

[node name="Turbo Panel" type="PanelContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox"]
z_index = 20
layout_mode = 2
size_flags_horizontal = 0
theme_override_styles/panel = SubResource("StyleBoxFlat_f0bq4")

[node name="HBoxContainer" type="HBoxContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Turbo Panel"]
layout_mode = 2

[node name="MarginContainer2" type="MarginContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Turbo Panel/HBoxContainer"]
layout_mode = 2
theme_override_constants/margin_left = 20

[node name="Turbo" type="Label" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Turbo Panel/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_colors/font_color = Color(1, 0.611765, 0.247059, 1)
theme_override_colors/font_outline_color = Color(1, 0.611765, 0.247059, 1)
theme_override_constants/outline_size = 3
theme_override_fonts/font = ExtResource("7_p568w")
text = "1"

[node name="TextureRect" type="TextureRect" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Turbo Panel/HBoxContainer"]
layout_mode = 2
texture = ExtResource("10_tp47c")

[node name="Speed Panel" type="PanelContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox"]
z_index = 20
layout_mode = 2
size_flags_horizontal = 0
theme_override_styles/panel = SubResource("StyleBoxFlat_f0bq4")

[node name="HBoxContainer" type="HBoxContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Speed Panel"]
layout_mode = 2

[node name="MarginContainer2" type="MarginContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Speed Panel/HBoxContainer"]
layout_mode = 2
theme_override_constants/margin_left = 20

[node name="Speed" type="Label" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Speed Panel/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(50, 0)
layout_mode = 2
theme_override_colors/font_color = Color(0.0627451, 0.784314, 0.25098, 1)
theme_override_colors/font_outline_color = Color(0.0627451, 0.784314, 0.25098, 1)
theme_override_constants/outline_size = 3
theme_override_fonts/font = ExtResource("7_p568w")
text = "0.0
"
horizontal_alignment = 1

[node name="MarginContainer" type="MarginContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Speed Panel/HBoxContainer"]
layout_mode = 2
theme_override_constants/margin_right = 20

[node name="Depth Panel" type="PanelContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox"]
z_index = 20
layout_mode = 2
size_flags_horizontal = 0
theme_override_styles/panel = SubResource("StyleBoxFlat_f0bq4")

[node name="HBoxContainer" type="HBoxContainer" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Depth Panel"]
layout_mode = 2

[node name="Depth" type="Label" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Depth Panel/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(50, 0)
layout_mode = 2
theme_override_constants/outline_size = 3
theme_override_fonts/font = ExtResource("7_p568w")
text = "0m"
horizontal_alignment = 2

[node name="TextureRect" type="TextureRect" parent="UI/MarginContainer/VBoxContainer/MarginContainer/HBox/Depth Panel/HBoxContainer"]
layout_mode = 2
texture = ExtResource("11_20etr")

[node name="MarginContainer3" type="MarginContainer" parent="UI/MarginContainer"]
layout_mode = 2
size_flags_vertical = 8
theme_override_constants/margin_top = 970

[node name="Control" type="Control" parent="UI/MarginContainer/MarginContainer3"]
layout_mode = 2

[node name="NotificationSystem" parent="UI/MarginContainer/MarginContainer3/Control" instance=ExtResource("28_xbrhy")]

[node name="Throttle" type="Control" parent="UI"]
custom_minimum_size = Vector2(300, 320)
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_top = -320.0
offset_right = 300.0
grow_vertical = 0

[node name="ThrottleBase" type="TextureRect" parent="UI/Throttle"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -150.0
offset_top = -160.0
offset_right = 150.0
offset_bottom = 160.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("29_417t6")

[node name="ThrottleKnob" type="TextureRect" parent="UI/Throttle"]
layout_mode = 2
offset_top = 90.0
offset_right = 300.0
offset_bottom = 146.0
texture = ExtResource("30_rkleb")

[node name="GameOver" type="Node2D" parent="."]
visible = false
z_index = 1
position = Vector2(960, 540)
script = ExtResource("32_v23fj")

[node name="Fade" type="ColorRect" parent="GameOver"]
z_index = 4
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -960.0
offset_top = -540.0
offset_right = 960.0
offset_bottom = 540.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.384314)

[node name="Box" type="Control" parent="GameOver"]
z_index = 5
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -250.0
offset_top = -50.0
offset_right = 250.0
offset_bottom = 350.0
grow_horizontal = 2
grow_vertical = 2

[node name="Panel" type="Panel" parent="GameOver/Box"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_bs6xb")

[node name="HBoxContainer" type="HBoxContainer" parent="GameOver/Box/Panel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
metadata/_edit_use_anchors_ = true

[node name="MarginContainer" type="MarginContainer" parent="GameOver/Box/Panel/HBoxContainer"]
layout_mode = 2
theme_override_constants/margin_left = 50

[node name="VBoxContainer" type="VBoxContainer" parent="GameOver/Box/Panel/HBoxContainer"]
layout_mode = 2

[node name="MarginContainer" type="MarginContainer" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer"]
layout_mode = 2
theme_override_constants/margin_top = 50

[node name="Panel" type="Panel" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="Message" type="Label" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer/Panel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(0.368627, 0.368627, 0.368627, 1)
theme_override_fonts/font = ExtResource("7_p568w")
text = "Pro Gaming Advice"
horizontal_alignment = 1
autowrap_mode = 2

[node name="Tip" type="Label" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer/Panel"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_fonts/font = ExtResource("7_p568w")
text = "This is a Pro Tip. This is such a pro tip that if you do what I do you will succeed!"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="MarginContainer2" type="MarginContainer" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer"]
layout_mode = 2
theme_override_constants/margin_left = 50
theme_override_constants/margin_top = 50
theme_override_constants/margin_right = 50
theme_override_constants/margin_bottom = 50

[node name="VBoxContainer" type="VBoxContainer" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2"]
custom_minimum_size = Vector2(300, 0)
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_constants/separation = 30

[node name="Try_Again" type="Button" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2/VBoxContainer"]
layout_mode = 2
theme_override_fonts/font = ExtResource("7_p568w")
text = "New Day"

[node name="Shop" type="Button" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2/VBoxContainer"]
layout_mode = 2
theme_override_fonts/font = ExtResource("7_p568w")
text = "Shop
"

[node name="Main_menu" type="Button" parent="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2/VBoxContainer"]
layout_mode = 2
text = "Main Menu"

[node name="Message" type="Sprite2D" parent="GameOver"]
z_index = 10
position = Vector2(0, -75)
texture = ExtResource("3_6s8mq")

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("13_f6g2e")

[node name="PB" type="Control" parent="."]
visible = false
z_index = 1
layout_mode = 3
anchors_preset = 10
anchor_right = 1.0
offset_right = 1000.0
grow_horizontal = 2

[node name="PB Label" type="Label" parent="PB"]
z_index = 1
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -197.0
offset_top = -81.0
offset_right = 197.0
offset_bottom = 8.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(1, 0, 0, 1)
theme_override_fonts/font = ExtResource("7_p568w")
theme_override_font_sizes/font_size = 48
text = "Personal Best"
horizontal_alignment = 1
vertical_alignment = 2

[node name="Record" type="Line2D" parent="PB"]
z_index = 1
points = PackedVector2Array(0, 0, 1920, 0)
width = 2.0
default_color = Color(1, 0, 0, 1)

[node name="DEBUG" type="Label" parent="."]
unique_name_in_owner = true
visible = false
offset_left = 112.0
offset_top = 190.0
offset_right = 272.0
offset_bottom = 213.0
text = "DEBUG DEBUG DEBUG"

[connection signal="pressed" from="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2/VBoxContainer/Try_Again" to="." method="new_day_button_pressed"]
[connection signal="pressed" from="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2/VBoxContainer/Shop" to="." method="shop_button_pressed"]
[connection signal="pressed" from="GameOver/Box/Panel/HBoxContainer/VBoxContainer/MarginContainer2/VBoxContainer/Main_menu" to="." method="main_menu_button_pressed"]
